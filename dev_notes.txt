# Gameplay
----------
- Creature draft (create-your-own faction)
    - Buildings at each level have a standard base cost (fibonacci?)
    - Sort creatures randomly
    - Each one after the first in the list costs an additional 10% (?)
    - If one player skips the first creature, second player sees a 10% discount
        - Simulates paying to move down the list like in Small World
    - Want 7 levels if army size is 6 (force you to leave one behind)
- Your castle is walkable, opponents' castles are not
    - This means no player can be defeated, your castle is a sanctuary
    - Goal is to assemble the Battle Garb of Anduran, not defeat all enemies
- Champion attributes
    - Attack, Defense, Spell Power, Knowledge?
    - Knowledge determines how many spells you can learn in your spellbook
        - Mage Guilds should offer more than you have space for (force choices)
        - Shrine of the Nth Circle needs to offer you a choice
        - Eagle Eye might steal a spell you don't want
    - Should there be a limit to number of creatures per stack?  Or total?
        - Total limit makes it hard to hero chain with low-level champions
        - Leadership primary skill?
        - Not until you can have more than one champion
    - Secondary skills?
- Resources
    - start with just gold
    - want trading resources to be an ability you claim on the map
    - but being stuck without the necessary resources for top buildings was basically
    a loss in H1.  Not fun.
        - would be ok if you had some alternative like doubling up on another
        building
    - resource generating building in castle?
- Magic
    - Want magic to seem magical
        - change the weather?
        - alter the terrain type?
        - nervous about Dimension Door/Water Walk/Fly/Town Portal
    - Spells cast by champions are adventure map only
        - direct damage spells don't scale well
            - OP in early game, under-powered late game
            - unless it might damage the caster's army too (e.g., Elemental Storm)
        - summoning creatures and boats
            - summon a neutral army that walks around on its own?
        - haste/slow, bless/curse, other (de-)buffs
        - counterspells or defensive spells might be awkward to use
            - but at least need Dispel Magic
        - Fire Wall and/or Quicksand could be interesting
        - Haunt/Set Guardian
        - Forestwalk
    - Each champion gains 1 mana from the region at the start of turn
        - grass = Water, dirt = Earth, swamp = Fire, desert = Air
        - no mana from snow or water?
        - Knowledge also limits your max mana?
    - Simplify to all "colorless" mana to start
    - Should spells cost movement points?
        - If there were a spell that restored movement, wouldn't want it to be
        castable after leaving a region
- Week of X
    - most of them should mean something, H2 was kinda boring
        - doesn't have to be every week, occasional "week of the mongoose" is fine
    - month of creature is fun
        - month of plague is not
        - anything that causes you to want to gimmick it (e.g., don't buy to try to
        hit a 2x, buy out to avoid plague) is no good
    - Small World Tales and Legends could inspire some ideas
    - GalCiv2-style mega events


# Game display
--------------
* team color the champions and the ellipse
* highlight the selected hex
    * map display can convert pixel to hex
    * game display controls the highlights
* flag all villages and windmills
* all animations inserted to AnimManager are AnimArrays
    * add convenience function for one-element arrays
    * AnimGroup can go away
    * AnimBase::get_runtime_ms() probably no longer needed
* AnimManager::update() needs rewriting
    * add visitor for finished()
* log battle messages in time with their animations
* Archer needs a defend image
* draw/animate HP bars
    * background color is 0,0,0,80
    * 4 pixels wide
    * fill colors are (all at 255 alpha):
        * 100,255,100 (light green, above max health)
        * 33,225,0 (green, full health)
        * 170,255,0 (yellow-green, 75%)
        * 255,175,0 (light orange, 50%)
        * 255,155,0 (orange, 25%)
        * 255,0,0 (red, below 25%)
    * border color is 213,213,213,200
    * uses blend mode blend (1)
    * source: units/drawer.cpp and units/unit.cpp
    * SDL_CreateTexture, SDL_GetWindowPixelFormat, SDL_TEXTUREACCESS_STREAMING
    * SDL_AllocFormat, SDL_FreeFormat
    * SDL_LockTexture, SDL_UnlockTexture
* borders
- info on currently selected champion
* data driven config of window elements (main map, minimap, etc.)
* add plurals to creature names
    * giving up on i18n for now, gettext is way more work than I want to do
    * tag places in the code that would need translation
- fonts
    * OldaniaADFStd
    * DejaVuSans
    * get the licenses from the Wesnoth COPYING file in the fonts dir
    * TTF_Init/TTF_Quit, TTF_OpenFont/TTF_CloseFont
    * don't use TTF_SetFontSize, open another handle to the same font
        * switching sizes clears internal glyph cache
    - TTF_RenderUTF8_Blended(_Wrapped), TTF_FontLineSkip, TTF_Error
        - note this requires SDL_ttf >= 2.0.18
    * first project: replace the titles on the puzzle map
- status bar at the bottom
    - AnimLog draws here instead of writing to the console
    - clicking on it expands to show the last ~10 messages
    - supports arrow keys and scroll wheel (draw something to indicate scrolling)
        - not trying to invent a GUI scrollbar
        - number each log message?
- Message boxes
    - Some AnimLog messages actually want to be message boxes


# Minimap
---------
* SdlTexture::make_editable_image(win, 144, 144)
    * SdlEditTexture will lock it, add accessors for the BitsPerPixel and format
    of underlying surface
* SDL_CreateRGBSurfaceWithFormat(0, <map-width>, <map-width>, BitsPerPixel,
format)
    * need SdlLockSurface before we can edit the pixels
    * team_color.cpp, applyColors shows how to set each pixel
    * may need to refactor this to pixel_utils
* color each pixel by terrain type
    * water RGB: 10, 96, 154
    * desert: 224, 204, 149
    * swamp: 65, 67, 48
    * grass: 69, 128, 24
    * dirt: 136, 110, 66
    * snow: 230, 240, 254
* dotted box to indicate current map position
* click and drag on minimap moves the main map too
* mark villages and castles by owner
* influence map by region
    * champions, castles, and villages are sources of influence
    * each player flood fill each neighbor region with 1 influence outward from
    each region they control
        * can't spread influence to a region controlled by another player
        * all players get to spread influence at the same time
* shade controlled regions with the player's color
- influence mapping as a separate class so an AI player could use it to evaluate
future game states
    - with that in mind, create a simplified game state object


# Event handling
----------------
- base class with virtual functions for mouse events
    - each widget that implements any events inherits from it
- register each widget with an event manager in SdlApp
    - Anduran wants to register itself so it can do game-specific logic
- instead of SdlApp dispatching events to all the widgets, the event manager takes
care of it
- every widget gets a chance to process every event
    - it's up to them to reject events outside their display region
- if there's a generic window layout manager, maybe it passes along events to each
widget?
- is this all overkill?
    - there are only two apps, each with different behavior
    - we can continue to name stuff the same just in case
- ideas:
    - MapViewApp shows details (debug info?) on the selected hex
    - MapDisplay handles right-click to pop up description of an object
    * MapDisplay::hexFromMousePos() has to return invalid if mouse is outside the
    display area


# Pathfinding
-------------
* Game objects (towns, windmills, etc.) should not be walkable unless they're a
destination hex
- configurable walking speed
* move one hex less to land in ZoC to attack
    * display an attack arrow
* region boundary stops movement
* highlight current path
* visitable objects (shipwrecks) are walkable regardless of terrain
    * do we want that?  you'd have to spend a whole day's movement just to go one hex
* base movement 150
    * add 7 for every slowest creature speed above 3, max 200?
    * grass, dirt, water cost 10 per tile, desert and snow 12, swamp 15
- native terrain is starting terrain for team
    - reduces movement cost to 10
- how do you plan paths over multiple turns?


# Boats
-------
* traverse regions to identify contiguous landmasses, coastal regions, coastal tiles
* place one lighthouse per landmass adjacent to water
    * flaggable
    * used to build boats
    * pick random region furthest from castles
* neutral boats are walkable
    * embarking changes the champion image to the team-colored boat
    * what happens to the neutral boat?
    * disembarking does the opposite, make sure to match the facing
    * water tiles become walkable if you're in a boat
    * walkability is a game state, not just a property of the tile
        * map tile is walkable if it doesn't contain an obstacle or part of a castle
        * game will have more rules on top of that
* create a boat version of the footsteps
- should zone of control extend from land into water or vice versa?
- should adjacent water regions be collapsed into a single region?
    - RandomMap would have to assign terrain before building neighbor graphs
    - is it ok if a region became empty?
        - happens all the time in voronoi(), empty regions get pruned
    - water becomes a shortcut between distant land regions, be careful
        - could change fair castle distance calculation
        - hesitant to enable anything that behaves like Dimension Door
- do we want no obstacles in water?


# Polish
--------
- delay for a beat before scrolling the map when mouse is near the edge
    - show a different mouse cursor for scrolling
* don't scroll when the mouse is outside the window
- how should obstacles overlap with different terrain?
* use the multi-edge transitions where available
* proper edge transitions to the border tiles
* draw the champion facing to the left when moving in that direction
* hide the ellipse while the champion is moving
* screen flashes white briefly when first loading
* try to cap the framerate to save CPU
* SDL_LogSetAllPriority
* render a full-scale map and scale it down to minimap size
    * team-colored hexes
    * minimap tiles in terrain colors
    * obstacle tiles in brown with different opacity for each terrain
    - use the water edge transitions between player-owned regions
        - ellipseToRefColor will work on any image
    * going to need SDL_SetSurfaceBlendMode(SDL_BLENDMODE_NONE)
    * crop the image in a little bit instead of worrying about jagged edges
    * tried 1/4 scale, led to display artifacts
* unified logging interface that supports both SDL logging and std::cerr
- log failures to start the app to a file
    - SDL takes over the console, can't log errors that happen before SDL starts


# Improving edge transitions
----------------------------
* water to desert looks bad
    * desert over water looks a lot better
* grass over everything
* snow over everything but grass
* desert over swamp and dirt
* swamp over dirt (debatable)
* everything over water
* grass > snow > desert > swamp > dirt > water
* C:\Program Files\Wesnoth\data\core\images\terrain\hills\regular-to-water looks good
for grass
    * dry-to-water for dirt?
* try C:\Program Files\Wesnoth\data\core\images\terrain\swamp\mud-long for
swamp-to-water
* C:\Program Files\Wesnoth\data\core\images\terrain\frozen\snow-to-water
* mark tiles when they're included in the same terrain transition so only one side
gets drawn
* multi-edge transition artwork
    * C:\Program Files\Wesnoth\data\core\images\terrain\grass\green-medium only has 1
    * C:\Program Files\Wesnoth\data\core\images\terrain\flat\dirt has up to 4
    * C:\Program Files\Wesnoth\data\core\images\terrain\sand\desert has up to 4
    * mud-long and mud-to-land only has 1
    * snow has 4, snow-to-water has 2
    * dry-to-water, regular-to-water both have 2
    * add to the edges sprite sheet, the 2s go in the second row, 3s in third etc.
        * starting direction in same order as first row
- draw multi-edge transitions for same terrain?


# Draw castles automatically
----------------------------
* castle walls relative to the center castle tile
* where to draw the wall images relative to its hex
- if a unit is inside the castle
    - lower its y-offset by 15, along with its ellipse
    - front walls need to be drawn at a higher ZOrder, but only if unit is inside
- option #2: higher ZOrder for castle walls, but even higher one for when a unit
is next to or in front of a castle
- option #3: lower ZOrder when a unit is inside or behind the castle


# Data-driven map objects
-------------------------
* text description
* list of allowed terrain (default all)
* has images to match each terrain? (default no)
* has multiple images, divided evenly among all locations
* number per region
    * normal (default 1) vs. castle region (default 0)
* probability to appear (default 100)
* flaggable? (default false)
* map display needs to return multiple objects per tile (to allow flags and creatures)
* objects with an army guarding them
* one-time visit objects change image after they've been visited, no longer visitable


# Game state
------------
* status of every game-relevant object
- not every object needs a drawable entity (why?)
* some objects represented by multiple entities (champions and their ellipses)
* keep track of armies
* zone of control, one hex radius points to the army controlling it
    * ZoC is not walkable unless it's a destination hex
    * update all of them any time somebody moves
    * champions should control their hexes, but no radius
* remove objects after they've been picked up
    * move to the invalid hex instead of deleting it?
- currently requires a drawable entity so an object can be flaggable


# Thoughts on Combat
--------------------
* every battle is auto-combat
- "color wheel": Flyer > Mounted > Melee > Ranged > Flyer
* prevent gang-ups, maybe limit to 2 attackers per creature?
* one retaliation per creature per round
* keep it simple at first
    * attack in descending speed order
    * attacker chooses target
    * no skips or waits
    * few attributes: damage range, hp, speed
* unit sizes: few, several (5), pack (10), lots (20), horde (50), throng (100),
swarm (250), zounds (500), legion (1000)
- idea: Tactics phase before combat
    - two rows of creatures
    - mounted and melee can only attack from the front row to the front row
    - flyers can attack front row from either row
    - ranged can attack either row from either row
    - ranged must use 1/2 damage melee attack if no friendly creatures in front of it
    - champion skill affects who gets to place creatures last
    - note that new rules will affect balance between creatures
- other ideas
    - elemental resistances
    - damage types, armor types
    - spells
        - units should be the primary direct-damage spellcasters
        - should there be limits?
        - spellcasting units would need an alternate attack
    - limited shots for ranged creatures
    - luck, morale
    - reach, retaliation
- additional traits
    - double strike
        - probably OP without retaliation
    - cursed, defending unit does minimum damage
        - how long would this state stay in effect?
        - how to animate its effect?
        - C:\Program Files\Wesnoth\images\icons\profiles for effect icons
    - binding, lowers target speed to 0
        - battle_utils has to re-sort unit attack order
    - life drain
        - battle_utils has to support attacker gaining HP on attack
        - support resurrecting units
        - AnimHealth needs to update attacker's HP bar too
    - regeneration
        - battle_utils needs an event that isn't an attack
        - unit heals at start of round
    - zombify
        - battle_utils has to recompute relative unit sizes
        - AnimHealth needs a color for beyond 100% HP
        - H2 Ghosts shows how OP this can be
- KISS principle: he who gets there first with the most, wins
    - none of these ideas matter unless we can render them so the player can see
    their effects
    - right now retaliation appears to give certain units two turns in a row
    - steadfast trait, unlimited retaliation not needed if no retaliation
    - first strike, ditto
    - trample probably more interesting with Tactics idea


# Obelisks
----------
* three sets of obelisks
    * gives puzzle pieces for the Helmet, Sword, and Breastplate
    * different image for each set
        * randomize the order they're assigned
    * grouped on the map, not scattered randomly
        * but the regions are numbered randomly so it'll be easier to start with
        them scattered
    * in regions with villages only
- possible simplification
    - first player to claim a village can get a puzzle piece from a member of the
    Shadow Guild
        - forces conflict between champions to get access to puzzle pieces
        - but what happens if a champion is defeated by a wandering army?
        - don't want to get into an unwinnable state
        - also a source for rumors?
        - similar function to H2 Thieves Guild?
    - but for now it gives us something else to do in each region
* defeating an enemy champion gives a copy of his puzzle pieces
* puzzle piece reveals random tile(s) on the map for its corresponding artifact
* each puzzle map is 13x7
    * X marks the spot in the center
    * this means artifacts have to be buried away from the edges of the map
    * shows terrain, edges, obstacles, and fixed objects without their flags
        * can we draw it black & white?
        * requires modifying each pixel
            * option 1, average RGB values, set them all the same
            * option 2, set R and B equal to G
    * when the X has been revealed, show it on the adventure map
    * require a minimum number of pieces revealed before the center piece could be
    shown
    * this would be a problem if more than 91 regions per obelisk type
* number of pieces = number of regions with that obelisk type
    * pre-assign each piece to a group of hexes, divided evenly
    * prefer hexes to be contiguous if possible
    * but can randomly assign them to start
* show puzzle map in a popup window
    * different map background for each artifact
    * show the known pieces
    * fade in the newly revealed piece, if any
    * be able to switch between maps easily
        * handle key_up events, left and right arrow
        * status code to know when to clear it and possibly redraw a different type
            * close_ok, cancel, left_arrow, right_arrow
    * close window easily
* rendering popup windows
    * animations have to finish (e.g., a champion moving into a village) before
    rendering the popup
    * need to draw the rest of the underlying window first before drawing the popup
    * main game window doesn't respond to clicks or anything else while popup is
    shown
    * interpolate the popup into position?  Nope, don't like it.
        * start from the hex on the map that caused it
        * draw the popup background only
        * go fast, 1000 ms at most
        * simple mouseovers and dialog boxes shouldn't bother with this
* digging
    * press D key
    * hex must be on land, and empty except for the champion itself
    * if on the target hex
        * assign the artifact to the player
        * replace X with a trapdoor visible to all players
    * show a hole in the ground for unsuccessful digs (Wesnoth crater image?)
    * if a player has all three artifacts, they win


# Image management
------------------
* animations have a key, number of frames, timing
* static images just need a key
* both might have to be team colored (lazily?)
* manager class needs handle to the window to be able to make textures
* images have:
    * base surface
    * 1 base texture
    * N team colored textures
* is a static image just a 1x1 texture atlas?
* is a static image just an animation with no frame timing?
* one class to rule them all?
* is the manager class just a vector of images?


# Entity system
---------------
* Drawable entities need:
    * partial pixel offset, initially assume drawn centered on the base hex
    * base hex
    * z-order (accents/flags, objects, hex shadow, hex highlight, projectiles, animating creature)
    * visible flag
    * texture or texture atlas + row/col
* keep the texture outside the entity struct so it's small and copyable
* store a variant texture/textureAtlas somewhere else?
* combine texture and textureAtlas into one class?
* pass entity updates by value, move-assign
* On each frame:
    * skip if not shown
    * convert base hex to pixel, compute the draw target
    * get bounding rect, determine whether within screen bounds
* should addEntity return the entity object instead?
* easier way to set the initial image frame?


# Map viewer
------------
* read map json file from disk
* choose randomly between the three images for each tile
* map scrolling
* select obstacle images
* draw obstacles
* edge transitions
    * grass overlaps everything else
    * snow overlaps dirt, desert, water, swamp (overlapped by grass)
    * swamp overlaps dirt and desert (overlapped by grass, snow, water)
    * water overlaps swamp and desert (overlapped by grass, dirt, snow)
    * dirt overlaps water (overlapped by grass, desert, snow, swamp)
    * desert overlaps dirt (overlapped by grass, water, snow, swamp)
* map border
* draw dashed line between regions of same terrain
* need to draw dotted line between grass regions
* Window needs to report its own boundary
* pick one village image per terrain
* placeholder art for villages and castles


# Random Map
------------
* voronoi algorithm
* write JSON file
    * requires a build system so I can link JSON lib
* build region neighbor graph
    * flat vector of pairs?
    * build the whole thing for each hex?
* assign terrain by altitude
	* start with random region at altitude 0
	* randomly +1, 0, -1 for each neighbor
	* altitude 0: water, desert, swamp
	* altitude 1-2: grass, dirt
	* altitude 3: dirt, snow
* simple noise to assign obstacles, choose random 1-3?
    * build noise library locally in build_dir
    * static link
    * c++ wrapper
* clear obstacles to ensure each region can reach at least one other region
* clear obstacles to ensure all open hexes in each region are reachable
	* requires pathfinding
	* hex neighbors that are within the same region
    * BFS to find all walkable hexes within a region
        * were any hexes not visited?
        * if yes, clear a path to nearest visited and walkable hex
        * repeat from the previous unvisited hex
* obstacle should just be a bool, MapDisplay should choose which image to use
    * refactor obstacle assignment
* randomly assign starting towns for 4 players
* store castle locations as Hex?
* placing wandering monsters
    * find all tiles with neighbor in a different region, both sides walkable and
    free from objects
        * neither region contains a castle
        * randomize this list, ensure each region pair is only chosen once
        * place an army there
* disallow objects within a one-hex radius of a village
    * prevents two villages from being placed next to each other
* compute each region's distance from a castle
    - use these to choose wandering army strength
* do we want to prevent armies with overlapping zones of control?
* what about when a castle is cut off by water?


# Containers
------------
* compact queue
    * minimize memory (de-)allocations
    * use a vector, keep index to the current front, add to the back
    * pop() should return by value to avoid invalidating references on push()
    * if pop() makes the queue empty, start overwriting old elements
    * this one is probably just a fun experiment, std::queue is going to be fine
* flat multimap
    * sorted vector of nodes
    * insert, sort, then read-only
    * write a find() that returns a range so we can use range-for-loop
        * bonus points if this exposes values only, not pairs
* priority heap
    * use some of the ideas from compact queue here?


# Build system
--------------
* set up git repository
* looked at build2, alpha release
* looked at Boost.Build, confusing
* go back to cmake (annoying)?
* maintain my own Makefile, learned how to auto-generate dependencies
* how does Wesnoth build on Windows?
* connect to GitHub
* GitHub two-factor auth?  (probably not worth the effort)


# C++ features
--------------
* use concepts to eliminate static_asserts
* ranges instead of begin/end or cbegin/cend on containers
* will RandomRange support aggregate initialization?  UnitData could set all members
in the header
* use Boost.PreProcessor to automatically register types with x_macros.h
    - std::type_index(typeid(E)) can be used to store a typename in a map
    * could eliminate the xtype wrapper functions each type has to provide
    * require iterable enum for this?  extension of it?
- C++23
    - std::to_underlying
    - replace boost flat_ containers with std ones
    - static data inside constexpr functions for iterable_enum_class
    - may not need contains() from container_utils anymore
    - can std::views::values replace ValueIterator in FlatMultimap?
* try out the Proj argument to ranges algorithms instead of writing an operator< or
a lambda
- Boost features used, to help determine a minimum version
    - flat_map and flat_set
    - MultiIndex container
    - Boost.Test
    - noncopyable
- rapidjson appears to be abandoned, try out nlohmann
    - or switch to YAML because it allows for comments
- try SDL_GetTicks64 again now that we're pointing at correct dll version
    - if it works, note that it requires SDL 2.0.18 or greater
- start a readme with min versions needed for SDL_, IMG_, and TTF_ functions used
